#!/usr/bin/env sh

print_usage() {
  cat <<USG

Usage: ${1} <action> <domain> [locale]

The cli command to generate/extract/update/compile gettext catalog files.
As generally steps, 1.extract, 2.update, 3.(edit) and 4.compile it.

Options:
  -h, --help   display this help and exit

Arguments:
  <action>   {compile|c},{extract|e},{generate|g},{update|u}
  <domain>   {message,form}
  [locale]   en

Actions:
  compile    compile *.po to *.mo for application
  extract    extract msgid(s) into *.pot
  generate   create new *.po file with latest *.pot
  update     update *.po using *.pot (template)

Examples:
  % linguine e message
  % linguine g message en
  % linguine u form en
  % linguine c form en
USG
}

# see https://gitlab.com/lupine-software/neuchatel
package_name="NeuchÃ¢tel"
package_version="0.1"
msgid_bugs_address="support@scrolliris.com"
copyright="Lupine Software LLC"

keyword="_"
width=73

action=""
domain=""
locale=""

getopt --test > /dev/null
if [ $? -ne 4 ]; then
  echo "\`getout --test\` failed"
fi

set -e

_options=h
_longoptions=help

_=`getopt --name "${0}" \
--options "${_options}" --longoptions "${_longoptions}" --unquoted -- "${@}"`

if [ $? -ne 0 ]; then
  exit 2
fi

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
      print_usage `basename $0`
      exit 0
      ;;
    "compile"|"c"|"extract"|"e"|"generate"|"g"|"update"|"u")
      action="${1}"
      shift
      ;;
    "message"|"form"|"console.json")
      domain="${1}"
      shift
      ;;
    "en")
      locale="${1}"
      shift
      ;;
    *)
      echo "Unknown option :'("
      exit 2
      ;;
  esac
done


run_extract_command() {
  file_list=""
  if [ "${domain}" = "message" ]; then
    file_list="`find ./aarau -type f \( -name '*.py' -or -name '*.mako' \) \
      ! -path "./**/*/form.py" -print`"
  elif [ "${domain}" = "form" ]; then
    file_list="`find ./aarau/**/*/form.py -type f \( -name '*.py' \) -print`"
  elif [ "${domain}" = "console.json" ]; then
    echo "[info] not supported; update it manually."
  fi
  if [ "${file_list}" != "" ]; then
    xgettext --default-domain=$domain --sort-output --keyword=$keyword \
      --output-dir=locale --output=$domain.pot \
      --from-code=UTF-8 --language=Python --width=$width \
      --msgid-bugs-address=$msgid_bugs_address \
      --directory=. \
      --package-name=$package_name --package-version=$package_version \
      $file_list
  fi
}

run_generate_command() {
  mkdir -p locale/$locale/LC_MESSAGES
  xgettext --default-domain=$domain --sort-output --width=$width \
    --output-dir=locale --output=$locale/LC_MESSAGES/$domain.po \
    --directory=locale \
    $domain.pot
}

run_update_command() {
  msgmerge --directory=locale \
  --output-file=locale/$locale/LC_MESSAGES/$domain.po --previous \
  --sort-output --width=$width \
  $locale/LC_MESSAGES/$domain.po $domain.pot
}

run_compile_command() {
  if [ "${domain}" = "console.json" ]; then
    if type "i18next-conv" > /dev/null; then
      i18next-conv -l $locale \
        -s locale/$locale/LC_MESSAGES/$domain.po \
        -t static/locale/$locale/$domain
    else
      echo "[info] #${domain} 18next-conv command is missing"
    fi
  else
    msgfmt --directory=locale/$locale/LC_MESSAGES $domain.po \
      --output-file=locale/$locale/LC_MESSAGES/$domain.mo \
      --check --strict
  fi
}

case $action in
  "c") action="compile"  ;;
  "e") action="extract"  ;;
  "g") action="generate" ;;
  "u") action="update"   ;;
esac


if [ "${action}" = "" ]; then
  echo "<action> is missing"
  print_usage `basename $0`
  exit 2
fi

if [ "${domain}" = "" ]; then
  echo "<domain> is missing"
  print_usage `basename $0`
  exit 2
fi

if [ "${action}" != "extract" ] && [ "${locale}" = "" ]; then
  echo "<locale> is missing"
  print_usage `basename $0`
  exit 2
fi

case $action in
  "compile")  run_compile_command  ;;
  "extract")  run_extract_command  ;;
  "generate") run_generate_command ;;
  "update")   run_update_command   ;;
  *)          echo 'unknown action'; exit 1 ;;
esac
