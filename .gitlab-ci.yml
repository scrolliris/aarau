# https://docs.gitlab.com/ce/ci/yaml/
stages:
  - vet
  - compile
  - build
  - test
  - codequality

check:
  stage: vet
  image: python:3.5.4
  variables:
    ENV: development
    PIP_CACHE_DIR: pip-cache
  before_script:
    - pip install --upgrade pip setuptools
    - python --version
    - pip --version
    - pip install flake8 flake8-docstrings -c constraints.txt
    - make clean
  script:
    - make check
  cache:
    untracked: true
    paths:
      - pip-cache
  except:
    - tags

lint:
  stage: vet
  image: python:3.5.4
  variables:
    APT_CACHE_DIR: apt-cache
    PIP_CACHE_DIR: pip-cache
  before_script:
    - mkdir -pv $APT_CACHE_DIR && apt-get -qq update
    - apt-get -qq -o dir::cache::archives="$APT_CACHE_DIR" install -y
      gcc zlib1g zlib1g-dev libmemcached11 libmemcached-dev
    - pip install --upgrade pip setuptools
    - python --version
    - pip --version
    - ENV=development make setup
    - ENV=test make setup
  script:
    - make lint
  cache:
    untracked: true
    paths:
      - apt-cache
      - pip-cache
  except:
    - tags

compile:
  stage: compile
  image: node:8.11.3
  variables:
    APT_CACHE_DIR: apt-cache
    NODE_ENV: production
  before_script:
    - mkdir -pv $APT_CACHE_DIR && apt-get -qq update
    - apt-get -qq -o dir::cache::archives="$APT_CACHE_DIR" install -y
      gettext
    - node --version
    #- npm cache clean --force
    - npm install --global npm@6.2.0
    - npm --version
    - npm install --only=dev
    - npm install --global i18next-conv
  script:
    - make catalog
  cache:
    untracked: true
    paths:
      - apt-cache
      - node_modules
  artifacts:
    untracked: true
    paths:
      - locale
      - static/locale
  except:
    - tags

build:
  stage: build
  image: node:8.11.3
  variables:
    NODE_ENV: production
  before_script:
    - node --version
    - npm install --global npm@6.2.0
    - npm --version
    #- npm cache clean --force
    - npm install --global gulp-cli
    - gulp --version
    - npm install --only=dev
    - npm install --ignore-scripts
  script:
    - make build
  cache:
    untracked: true
    paths:
      - node_modules
  artifacts:
    untracked: true
    paths:
      - static
  except:
    - tags

doctest:
  stage: test
  image: python:3.5.4
  variables:
    APT_CACHE_DIR: apt-cache
    PIP_CACHE_DIR: pip-cache
  before_script:
    - mkdir -pv $APT_CACHE_DIR && apt-get -qq update
    - apt-get -qq -o dir::cache::archives="$APT_CACHE_DIR" install -y
      gcc zlib1g zlib1g-dev libmemcached11 libmemcached-dev
    - pip install --upgrade pip setuptools
    - python --version
    - pip --version
    - ENV=development make setup
    - ENV=test make setup
  script:
    - make doctest
  cache:
    untracked: true
    paths:
      - apt-cache
      - pip-cache
  except:
    - tags

jstest:
  stage: test
  image: node:8.11.3
  variables:
    NODE_ENV: development
    APT_CACHE_DIR: apt-cache
  before_script:
    - mkdir -pv $APT_CACHE_DIR && apt-get -qq update
    - apt-get -qq -o dir::cache::archives="$APT_CACHE_DIR" install -y
      xvfb firefox-esr
    - ln -s /opt/firefox/firefox /usr/local/bin/
    - firefox --version
    - node --version
    - npm install --global npm@6.2.0
    - npm --version
    #- npm cache clean --force
    - npm install --global karma-cli
    - npm install --only=dev
    - npm install --ignore-scripts
    - karma --version
  script:
    - xvfb-run karma start
  cache:
    untracked: true
    paths:
      - apt-cache
      - node_modules
  artifacts:
    untracked: true
    paths:
      - static
  except:
    - tags

test:
  stage: test
  image: python:3.5.4
  services:
    - postgres:9.6
    - redis:3.2
  variables:
    APT_CACHE_DIR: apt-cache
    PIP_CACHE_DIR: pip-cache
    ENV: test
    POSTGRES_DB: aarau_test
    POSTGRES_USER: aarau
    POSTGRES_PASSWORD: aarau
  dependencies:
    - compile
    - build
  before_script:
    - mkdir -pv $APT_CACHE_DIR && apt-get -qq update
    - apt-get -qq -o dir::cache::archives="$APT_CACHE_DIR" install -y
      gcc zlib1g zlib1g-dev libmemcached11 libmemcached-dev
    - pip install --upgrade pip setuptools
    - python --version
    - pip --version
    - make setup
    - make db-init
    - make db-migrate
  script:
    - make coverage
  cache:
    untracked: true
    paths:
      - apt-cache
      - pip-cache
  except:
    - tags

# NOTE:
# Run this locally for a while, It will fail on CI (Docker) for selenium driver.
#
# It may be useful:
# https://gitlab.com/gitlab-org/gitlab-selenium-server
#
#browsertest:
#  stage: test
#  image: python:3.5.4
#  services:
#    - postgres:9.6
#    - redis:3.2
#  variables:
#    APT_CACHE_DIR: apt-cache
#    PIP_CACHE_DIR: pip-cache
#    ENV: test
#    TEST_DOMAIN: localhost
#    TEST_SESSION_COOKIE_DOMAIN: localhost
#    POSTGRES_DB: aarau_test
#    POSTGRES_USER: aarau
#    POSTGRES_PASSWORD: aarau
#  dependencies:
#    - compile
#    - build
#  before_script:
#    - mkdir -pv $APT_CACHE_DIR && apt-get -qq update
#    - apt-get -qq -o dir::cache::archives="$APT_CACHE_DIR" install -y
#      gcc zlib1g zlib1g-dev libmemcached11 libmemcached-dev
#      xvfb libnss3 firefox-esr
#    - ln -s /opt/firefox/firefox /usr/local/bin/
#    - firefox --version
#    - ./bin/setup-geckodriver
#    - ./bin/geckodriver --version
#    - pip install --upgrade pip setuptools
#    - python --version
#    - pip --version
#    - make setup
#    - make db-init
#    - make db-migrate
#  script:
#    - xvfb-run make browsertest
#  cache:
#    untracked: true
#    paths:
#      - apt-cache
#      - pip-cache
#      - bin
#  except:
#    - tags

codequality:
  stage: codequality
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay
  before_script:
    # 0.70.1 fails
    - docker pull codeclimate/codeclimate:0.70.0
    - docker run --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate validate-config
    - docker run --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate engines:install
  script:
    - docker run --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate analyze -f json > codequality.json
  artifacts:
    paths:
      - codequality.json
